CREATE TABLE IF NOT EXISTS funcionario(
	 id_func INTEGER PRIMARY KEY AUTOINCREMENT,
     nome_func VARCHAR(100) not NULL,
     cpf_func VARCHAR(14) NOT NULL UNIQUE,
     telefone_func VARCHAR(15),
     email_func VARCHAR(100),
     data_nascimento_func DATE,
     cep_func INTEGER,
  	 bairro_func VARCHAR(30),
  	 rua_func VARCHAR(30),
  	 estado_func VARCHAR(2),
     genero_func VARCHAR(2),
     cargo_func	VARCHAR(30)
);
CREATE TABLE IF NOT EXISTS cliente(
	id_cli INTEGER PRIMARY KEY AUTOINCREMENT,
    nome_cli VARCHAR(100) NOT NULL,
    cpf_cli VARCHAR(14) NOT NULL UNIQUE,	
    telefone_cli VARCHAR(15),
    data_nascimento_cli DATE,
    endereco_cli TEXT
	
);

CREATE TABLE IF NOT EXISTS categoria(
	id_cat INTEGER PRIMARY KEY AUTOINCREMENT,
    nome_cat TEXT NOT NULL,
    descricao_cat TEXT
);

CREATE TABLE IF NOT EXISTS produto(
	id_prod INTEGER PRIMARY KEY AUTOINCREMENT,
    nome_prod TEXT NOT NULL,
    descricao_prod TEXT,
    codigo_barras_prod TEXT UNIQUE,
    preco_custo_prod REAL NOT NULL,
    preco_venda_prod REAL NOT NULL,
  	quantidade_estoque_prod INTEGER DEFAULT 0,
    id_cat INTEGER,
    id_forn INTEGER,
    data_validade_prod DATE,
    unidade_medida_prod TEXT,
    FOREIGN KEY (id_cat) REFERENCES categorias(id_cat),
    FOREIGN KEY (id_forn) REFERENCES fornecedores(id_forn)
);

CREATE TABLE IF NOT EXISTS fornecedor(
	id_forn INTEGER PRIMARY KEY AUTOINCREMENT,
    nome_forn TEXT NOT NULL,
    cnpj_forn TEXT UNIQUE,
    telefone_forn TEXT,
    email_forn TEXT,
    endereco_forn TEXT
);

CREATE TABLE IF NOT EXISTS vendas(
	id_ven INTEGER PRIMARY KEY AUTOINCREMENT,
    data_hora_ven DATETIME DEFAULT CURRENT_TIMESTAMP,
    id_cli INTEGER,
    id_func INTEGER,
    total_ven REAL NOT NULL,
    forma_pagamento_ven TEXT,
    status_ven TEXT DEFAULT 'finalizada',
    FOREIGN KEY (id_cli) REFERENCES clientes(id_cli),
    FOREIGN KEY (id_func) REFERENCES funcionarios(id_func)
);

CREATE TABLE IF NOT EXISTS notas_fiscais (
    id_not INTEGER PRIMARY KEY AUTOINCREMENT,
    numero_not INTEGER NOT NULL,
    serie_not TEXT NOT NULL DEFAULT '1',
    chave_acesso_not TEXT UNIQUE,
    id_ven INTEGER NOT NULL,
    data_emissao_not DATETIME DEFAULT CURRENT_TIMESTAMP,
    data_saida_not DATETIME,
    tipo_operacao_not INTEGER DEFAULT 1, -- 1=saída, 2=entrada
    status_not TEXT DEFAULT 'EMITIDA', -- EMITIDA, CANCELADA, CONTINGENCIA
    natureza_operacao_not TEXT DEFAULT 'VENDA',
    codigo_nfe_not TEXT,
    xml_not TEXT,
    pdf_not BLOB,
    FOREIGN KEY (id_ven) REFERENCES vendas(id_ven)
);

CREATE TABLE historico (
    id_hist INTEGER PRIMARY KEY AUTOINCREMENT,
    id_ven INTEGER NOT NULL,
    id_prod INTEGER NOT NULL,
    quantidade_hist INTEGER NOT NULL CHECK(quantidade > 0),
    preco_unitario_hist REAL NOT NULL CHECK(preco_unitario > 0),
    subtotal_hist REAL NOT NULL CHECK(subtotal > 0),
    
    FOREIGN KEY (id_ven) REFERENCES vendas(id_ven) ON DELETE CASCADE,
    FOREIGN KEY (id_prod) REFERENCES produtos(id_prod) ON DELETE RESTRICT
);

/*INNER JOIN livros 	on emprestimos.id_livro=livros.id_livro*/

select nome_prod, quantidade_estoque_prod, preco_venda_prod FROM produto ORDER BY nome;

/*insert into produto (nome, descricao, preco_custo, preco_venda, quantidade_estoque, data_validade)
VALUES ('Arroz', 'Saco de Arroz 1 KG', 3.59, 5.99, 50, 20/05/2026);

insert into produto (nome, descricao, preco_custo, preco_venda, quantidade_estoque, data_validade)
VALUES ('Feijão', 'Saco de Feijão 1 KG', 2.80, 4.79, 30, 03/06/2026);

insert into produto (nome, descricao, preco_custo, preco_venda, quantidade_estoque, data_validade)
VALUES ('Açúcar', 'Pacote de Açúcar 5 KG', 1.50, 3.49, 70, 04/02/2026);

insert into produto (nome, descricao, preco_custo, preco_venda, quantidade_estoque, data_validade)
VALUES ('Óleo', 'Frasco de Óleo 500ML', 4.30, 6.59, 20, 01/07/26);

insert into produto (nome, descricao, preco_custo, preco_venda, quantidade_estoque, data_validade)
VALUES ('Sal', 'Pacote de Sal 5 KG', 0.50, 2.10, 90, 16/08/2025);

insert into produto (nome, descricao, preco_custo, preco_venda, quantidade_estoque, data_validade)
VALUES ('Leite', 'Garrafa de Leite', 1, 4.99, 45, 02/09/2025);*/

  --select nome, quantidade_estoque, preco_venda from produto WHERE nome LIKE :termo || '%' ORDER BY nome LIMIT 20;

select nome_prod, quantidade_estoque_prod, preco_venda_prod FROM produto ORDER BY nome;

/*Arrumar coisas faltando no Banco de dados (ex: funcionario q n tem a parte de genero presente do front end)
Arrumar front end para estar certo com o BD (ex: nao usamos banco de dados relacional na area de adicionar produto)
ou seja "sincronizar" o front end com o bd