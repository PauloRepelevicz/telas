CREATE TABLE IF NOT EXISTS funcionario(
	 id INTEGER PRIMARY KEY AUTOINCREMENT,
     nome VARCHAR(100) not NULL,
     cpf VARCHAR(14) NOT NULL UNIQUE,
     telefone VARCHAR(15),
     email VARCHAR(100),
     data_nascimento DATE,
     cep INTEGER,
  	 bairro VARCHAR(30),
  	 rua VARCHAR(30),
  	 estado VARCHAR(2),
     genero VARCHAR(2),
     cargo 	VARCHAR(30),
);
CREATE TABLE IF NOT EXISTS cliente(
	id INTEGER PRIMARY KEY AUTOINCREMENT,
    nome VARCHAR(100) NOT NULL,
    cpf VARCHAR(14) NOT NULL UNIQUE,	
    telefone VARCHAR(15),
    data_nascimento DATE,
    endereco TEXT
	
);

CREATE TABLE IF NOT EXISTS categoria(
	id INTEGER PRIMARY KEY AUTOINCREMENT,
    nome TEXT NOT NULL,
    descricao TEXT
);

CREATE TABLE IF NOT EXISTS produto(
	id INTEGER PRIMARY KEY AUTOINCREMENT,
    nome TEXT NOT NULL,
    descricao TEXT,
    codigo_barras TEXT UNIQUE,
    preco_custo REAL NOT NULL,
    preco_venda REAL NOT NULL,
    quantidade_estoque INTEGER DEFAULT 0,
    categoria_id INTEGER,
    fornecedor_id INTEGER,
    data_validade DATE,
    unidade_medida TEXT,
    FOREIGN KEY (categoria_id) REFERENCES categorias(id),
    FOREIGN KEY (fornecedor_id) REFERENCES fornecedores(id)
);

CREATE TABLE IF NOT EXISTS fornecedor(
	id INTEGER PRIMARY KEY AUTOINCREMENT,
    nome TEXT NOT NULL,
    cnpj TEXT UNIQUE,
    telefone TEXT,
    email TEXT,
    endereco TEXT
);

CREATE TABLE IF NOT EXISTS vendas(
	id INTEGER PRIMARY KEY AUTOINCREMENT,
    data_hora DATETIME DEFAULT CURRENT_TIMESTAMP,
    cliente_id INTEGER,
    funcionario_id INTEGER,
    total REAL NOT NULL,
    forma_pagamento TEXT,
    status TEXT DEFAULT 'finalizada',
    FOREIGN KEY (cliente_id) REFERENCES clientes(id),
    FOREIGN KEY (funcionario_id) REFERENCES funcionarios(id)
);

CREATE TABLE IF NOT EXISTS notas_fiscais (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    numero INTEGER NOT NULL,
    serie TEXT NOT NULL DEFAULT '1',
    chave_acesso TEXT UNIQUE,
    venda_id INTEGER NOT NULL,
    data_emissao DATETIME DEFAULT CURRENT_TIMESTAMP,
    data_saida DATETIME,
    tipo_operacao INTEGER DEFAULT 1, -- 1=saída, 2=entrada
    status TEXT DEFAULT 'EMITIDA', -- EMITIDA, CANCELADA, CONTINGENCIA
    natureza_operacao TEXT DEFAULT 'VENDA',
    codigo_nfe TEXT,
    xml TEXT,
    pdf BLOB,
    FOREIGN KEY (venda_id) REFERENCES vendas(id)
);

CREATE TABLE venda (
    id_venda INTEGER PRIMARY KEY AUTOINCREMENT,
    data_venda DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    id_cliente INTEGER,
    valor_total REAL NOT NULL CHECK(valor_total >= 0),
    forma_pagamento TEXT NOT NULL CHECK(forma_pagamento IN ('dinheiro', 'cartao_credito', 'cartao_debito', 'pix', 'transferencia', 'outro')),
    status TEXT NOT NULL CHECK(status IN ('pendente', 'concluida', 'cancelada', 'devolvida')) DEFAULT 'concluida',
    observacoes TEXT,
    
    FOREIGN KEY (id_cliente) REFERENCES clientes(id_cliente) ON DELETE SET NULL
);

CREATE TABLE historico (
    id_historico INTEGER PRIMARY KEY AUTOINCREMENT,
    id_venda INTEGER NOT NULL,
    id_produto INTEGER NOT NULL,
    quantidade INTEGER NOT NULL CHECK(quantidade > 0),
    preco_unitario REAL NOT NULL CHECK(preco_unitario > 0),
    subtotal REAL NOT NULL CHECK(subtotal > 0),
    
    FOREIGN KEY (id_venda) REFERENCES venda(id_venda) ON DELETE CASCADE,
    FOREIGN KEY (id_produto) REFERENCES produtos(id_produto) ON DELETE RESTRICT
);

/*INNER JOIN livros 	on emprestimos.id_livro=livros.id_livro*/

select nome, quantidade_estoque, preco_venda FROM produto ORDER BY nome;


















/*insert into produto (nome, descricao, preco_custo, preco_venda, quantidade_estoque, data_validade)
VALUES ('Arroz', 'Saco de Arroz 1 KG', 3.59, 5.99, 50, 20/05/2026);

insert into produto (nome, descricao, preco_custo, preco_venda, quantidade_estoque, data_validade)
VALUES ('Feijão', 'Saco de Feijão 1 KG', 2.80, 4.79, 30, 03/06/2026);

insert into produto (nome, descricao, preco_custo, preco_venda, quantidade_estoque, data_validade)
VALUES ('Açúcar', 'Pacote de Açúcar 5 KG', 1.50, 3.49, 70, 04/02/2026);

insert into produto (nome, descricao, preco_custo, preco_venda, quantidade_estoque, data_validade)
VALUES ('Óleo', 'Frasco de Óleo 500ML', 4.30, 6.59, 20, 01/07/26);

insert into produto (nome, descricao, preco_custo, preco_venda, quantidade_estoque, data_validade)
VALUES ('Sal', 'Pacote de Sal 5 KG', 0.50, 2.10, 90, 16/08/2025);

insert into produto (nome, descricao, preco_custo, preco_venda, quantidade_estoque, data_validade)
VALUES ('Leite', 'Garrafa de Leite', 1, 4.99, 45, 02/09/2025);*/

  --select nome, quantidade_estoque, preco_venda from produto WHERE nome LIKE :termo || '%' ORDER BY nome LIMIT 20;

select nome, quantidade_estoque, preco_venda FROM produto ORDER BY nome;

/*Arrumar coisas faltando no Banco de dados (ex: funcionario q n tem a parte de genero presente do front end)
Arrumar front end para estar certo com o BD (ex: nao usamos banco de dados relacional na area de adicionar produto)
ou seja "sincronizar" o front end com o bd